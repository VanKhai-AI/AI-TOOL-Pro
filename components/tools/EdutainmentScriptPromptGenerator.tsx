import React, { useState, useCallback } from 'react';
import { Type } from "@google/genai";
import { useToolState } from '../../contexts/ToolStateContext';
import { AI_TOOLS, SCRIPT_GENERATOR_MODEL } from '../../constants';
// FIX: Added 'ScriptPartImagePrompts' to the import from '../../types'. This type will be created in types.ts.
import { ScriptPartImagePrompts } from '../../types';
import Spinner from '../ui/Spinner';
import { DownloadIcon, CopyIcon, CheckIcon } from '../ui/Icon';
import ToolLayout from './common/ToolLayout';
import Textarea from './common/Textarea';
import useGeminiApi from '../../hooks/useGeminiApi';

interface ScriptPart {
    partIndex: number;
    title: string;
    content: string;
}

const EdutainmentScriptPromptGenerator: React.FC = () => {
    const tool = AI_TOOLS.find(t => t.id === 'edutainment-image-prompts')!;
    const toolId = 'edutainment-image-prompts';
    const { getToolState, updateToolState } = useToolState();
    const state = getToolState(toolId);
    const {
        scriptText = '',
        generatedScriptPrompts = null
    } = state;
    
    const { generate } = useGeminiApi();
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);

    const [progress, setProgress] = useState(0);
    const [isCopied, setIsCopied] = useState(false);

    const getPromptForSentence = (sentence: string, forCopying?: boolean) => {
        if (!sentence) return '';
        
        const outputInstruction = forCopying
            ? `ƒê·ªäNH D·∫†ùêçùêÜ ƒê·∫¶U RA (VƒÉn b·∫£n thu·∫ßn t√∫y):
Tr·∫£ v·ªÅ m·ªôt g·ª£i √Ω h√¨nh ·∫£nh duy nh·∫•t d∆∞·ªõi d·∫°ng vƒÉn b·∫£n thu·∫ßn t√∫y b·∫±ng ti·∫øng Anh.`
            : `ƒê·ªäNH D·∫†NG ƒê·∫¶U RA (JSON):
Tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng JSON duy nh·∫•t c√≥ m·ªôt kh√≥a "imagePrompt". Gi√° tr·ªã l√† m·ªôt chu·ªói ch·ª©a g·ª£i √Ω h√¨nh ·∫£nh.
V√≠ d·ª•: { "imagePrompt": "A vibrant 3D render of..." }`;
        
        return `VAI TR√í:
B·∫°n l√† m·ªôt AI chuy√™n t·∫°o g·ª£i √Ω h√¨nh ·∫£nh (image prompts) chi ti·∫øt, r√µ r√†ng v√† h·∫•p d·∫´n cho video gi√°o d·ª•c v√† gi·∫£i tr√≠ (edutainment).

PHONG C√ÅCH NGH·ªÜ THU·∫¨T:
Phong c√°ch ngh·ªá thu·∫≠t n√™n r√µ r√†ng, h·∫•p d·∫´n v√† ph√π h·ª£p v·ªõi ch·ªß ƒë·ªÅ gi√°o d·ª•c/gi·∫£i tr√≠. ∆Øu ti√™n h√¨nh ·∫£nh c√≥ m√†u s·∫Øc t∆∞∆°i s√°ng, b·ªë c·ª•c nƒÉng ƒë·ªông v√† c√≥ th·ªÉ truy·ªÅn t·∫£i th√¥ng tin m·ªôt c√°ch tr·ª±c quan. S·ª≠ d·ª•ng phong c√°ch digital art ho·∫∑c 3D render hi·ªán ƒë·∫°i.

NHI·ªÜM V·ª§:
D·ª±a tr√™n M·ªòT c√¢u duy nh·∫•t t·ª´ k·ªãch b·∫£n ƒë∆∞·ª£c cung c·∫•p d∆∞·ªõi ƒë√¢y, h√£y t·∫°o m·ªôt g·ª£i √Ω h√¨nh ·∫£nh b·∫±ng ti·∫øng Anh ƒë·ªÉ minh h·ªça cho c√¢u ƒë√≥.

C√ÇU K·ªäCH B·∫¢N:
"${sentence}"

QUY T·∫ÆC:
- G·ª£i √Ω h√¨nh ·∫£nh ph·∫£i b·∫±ng ti·∫øng Anh.
- G·ª£i √Ω ph·∫£i m√¥ t·∫£ m·ªôt c·∫£nh duy nh·∫•t, g·∫Øn k·∫øt.
- G·ª£i √Ω ph·∫£i ph√π h·ª£p v·ªõi phong c√°ch ngh·ªá thu·∫≠t gi√°o d·ª•c v√† gi·∫£i tr√≠.

${outputInstruction}
`;
    };

    const handleGenerate = useCallback(async () => {
        if (!scriptText) {
            setError("K·ªãch b·∫£n tr·ªëng.");
            return;
        }

        const partRegex = /###\s*(.*?)\s*###\n\n([\s\S]*?)(?=\n\n###|$)/g;
        const parsedParts: ScriptPart[] = [];
        let match;
        let partIndex = 0;
        while ((match = partRegex.exec(scriptText)) !== null) {
            parsedParts.push({
                partIndex: partIndex++,
                title: match[1].trim(),
                content: match[2].trim(),
            });
        }

        if (parsedParts.length === 0) {
             setError("Kh√¥ng t√¨m th·∫•y ph·∫ßn n√†o trong k·ªãch b·∫£n. Vui l√≤ng ƒë·∫£m b·∫£o k·ªãch b·∫£n ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng v·ªõi c√°c ti√™u ƒë·ªÅ nh∆∞ '### Part 1: Title ###'.");
             return;
        }

        setIsLoading(true);
        setError(null);
        updateToolState(toolId, { generatedScriptPrompts: null });
        setProgress(0);
        
        const allSentences = parsedParts.flatMap(p => p.content.split('\n').filter(s => s.trim() !== ''));
        const totalSentences = allSentences.length;
        let sentencesProcessed = 0;

        const newPrompts: ScriptPartImagePrompts = { parts: {} };

        const jsonSchema = { type: Type.OBJECT, properties: { imagePrompt: { type: Type.STRING } }, required: ["imagePrompt"] };

        for (const part of parsedParts) {
            const sentences = part.content.split('\n').filter(s => s.trim() !== '');
            newPrompts.parts[part.partIndex] = [];

            for (const sentence of sentences) {
                 try {
                    const prompt = getPromptForSentence(sentence, false);
                    const response = await generate({ model: SCRIPT_GENERATOR_MODEL, contents: prompt, config: { responseMimeType: "application/json", responseSchema: jsonSchema }});

                    if (response) {
                        // FIX: Cast the parsed JSON to a specific type to avoid 'unknown' type errors.
                        const result = JSON.parse(response.text) as { imagePrompt: string };
                        if (result && result.imagePrompt) {
                            newPrompts.parts[part.partIndex].push({ textNote: sentence, imagePrompt: result.imagePrompt });
                        } else {
                            newPrompts.parts[part.partIndex].push({ textNote: sentence, imagePrompt: "L·ªói: Kh√¥ng th·ªÉ t·∫°o g·ª£i √Ω." });
                        }
                    } else {
                        throw new Error("API call failed.");
                    }
                 } catch (e: any) {
                    setError(`ƒê√£ x·∫£y ra l·ªói ·ªü c√¢u "${sentence.substring(0, 30)}...": ${e.message}. Qu√° tr√¨nh ƒë√£ d·ª´ng l·∫°i.`);
                    setIsLoading(false);
                    return;
                } finally {
                    sentencesProcessed++;
                    setProgress((sentencesProcessed / totalSentences) * 100);
                    updateToolState(toolId, { generatedScriptPrompts: { ...newPrompts } });
                }
            }
        }
        
        setIsLoading(false);
    }, [scriptText, updateToolState, generate]);

    const handleDownload = () => {
        if (!generatedScriptPrompts) return;
        let content = '';
        Object.keys(generatedScriptPrompts.parts).forEach(partIndex => {
            const partTitle = scriptText.match(new RegExp(`###\\s*(Part ${Number(partIndex) + 1}:.*?)\\s*###`));
            const prompts = generatedScriptPrompts.parts[Number(partIndex)];
            content += `==================== ${partTitle ? partTitle[1] : `PART ${Number(partIndex) + 1}`} ====================\n\n`;
            prompts.forEach(p => {
                content += `[C√¢u k·ªãch b·∫£n]: ${p.textNote}\n[G·ª£i √Ω h√¨nh ·∫£nh]: ${p.imagePrompt}\n\n`;
            });
        });
        const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'g·ª£i-√Ω-h√¨nh-·∫£nh-k·ªãch-b·∫£n.txt';
        document.body.appendChild(a); a.click(); document.body.removeChild(a); URL.revokeObjectURL(url);
    };

    const handleCopy = () => {
        if (!generatedScriptPrompts) return;
        const content = Object.values(generatedScriptPrompts.parts).flat().map(p => p.imagePrompt).join('\n\n');
        navigator.clipboard.writeText(content);
        setIsCopied(true);
        setTimeout(() => setIsCopied(false), 2000);
    };

    const promptCount = generatedScriptPrompts ? Object.values(generatedScriptPrompts.parts).flat().length : 0;
    
    const getPartTitle = (partIndex: number) => {
        const partRegex = /###\s*(.*?)\s*###/g;
        const titles = Array.from(scriptText.matchAll(partRegex), m => m[1]);
        return titles[partIndex] || `Ph·∫ßn ${partIndex + 1}`;
    };

    return (
        <ToolLayout tool={tool} language={'vi'} setLanguage={() => {}} getPrompt={() => getPromptForSentence('[C√¢u k·ªãch b·∫£n m·∫´u]', true)}>
            <div className="flex flex-col gap-6">
                <Textarea label="K·ªãch b·∫£n t·ª´ B∆∞·ªõc 3" id="script" value={scriptText} onChange={e => updateToolState(toolId, { scriptText: e.target.value })} placeholder="D√°n to√†n b·ªô k·ªãch b·∫£n ƒë√£ t·∫£i v·ªÅ t·ª´ B∆∞·ªõc 3 (ph·∫£i bao g·ªìm c√°c ti√™u ƒë·ªÅ ph·∫ßn nh∆∞ '### Part 1:... ###')." rows={12} required />

                <button onClick={handleGenerate} disabled={isLoading || !scriptText} className={`w-full flex justify-center items-center gap-2 text-white font-bold py-3 px-6 rounded-lg transition duration-300 shadow-md ${isLoading ? 'bg-red-600' : 'bg-green-600 hover:bg-green-700 disabled:bg-zinc-500'}`}>
                    {isLoading ? <><Spinner/> ƒêang t·∫°o...</> : 'T·∫°o G·ª£i √ù H√¨nh ·∫¢nh'}
                </button>
                
                {isLoading && (
                    <div className="w-full bg-zinc-200 dark:bg-zinc-700 rounded-full h-2.5">
                        <div className="bg-blue-600 h-2.5 rounded-full" style={{ width: `${progress}%` }}></div>
                    </div>
                )}

                {error && <p className="text-red-500 dark:text-red-400 text-sm text-center">{error}</p>}
                 
                {generatedScriptPrompts && promptCount > 0 && (
                    <div className="flex flex-col gap-4">
                        <div className="flex justify-between items-center">
                             <h3 className="font-bold text-sky-500 dark:text-sky-400">G·ª£i √Ω ƒë√£ t·∫°o ({promptCount})</h3>
                             <div className="flex items-center gap-2">
                                <button onClick={handleCopy} className="flex items-center gap-2 bg-zinc-200 hover:bg-zinc-300 dark:bg-zinc-700 dark:hover:bg-zinc-600 text-zinc-700 dark:text-zinc-200 font-bold py-2 px-3 rounded-md transition duration-300 text-sm">
                                    {isCopied ? <CheckIcon/> : <CopyIcon/>} {isCopied ? 'ƒê√£ sao ch√©p' : 'Sao ch√©p t·∫•t c·∫£'}
                                </button>
                                <button onClick={handleDownload} className="flex items-center gap-2 bg-zinc-200 hover:bg-zinc-300 dark:bg-zinc-700 dark:hover:bg-zinc-600 text-zinc-700 dark:text-zinc-200 font-bold py-2 px-3 rounded-md transition duration-300 text-sm">
                                    <DownloadIcon/> T·∫£i xu·ªëng
                                </button>
                             </div>
                        </div>
                        <div className="bg-zinc-50 dark:bg-zinc-800/50 p-4 rounded-xl border border-zinc-200 dark:border-zinc-700 h-[30rem] overflow-y-auto">
                            <div className="space-y-6">
                                {Object.keys(generatedScriptPrompts.parts).map(partIndexStr => {
                                    const partIndex = Number(partIndexStr);
                                    const prompts = generatedScriptPrompts.parts[partIndex];
                                    return (
                                        <div key={partIndex}>
                                            <h4 className="font-bold text-lg text-cyan-600 dark:text-cyan-400 mb-2">{getPartTitle(partIndex)}</h4>
                                            <div className="space-y-4 pl-4 border-l-2 border-cyan-500/50">
                                                {prompts.map((p, index) => (
                                                    <div key={index} className="bg-white dark:bg-zinc-900/50 p-3 rounded-lg border border-zinc-200 dark:border-zinc-700/50">
                                                        <p className="text-sm italic text-zinc-600 dark:text-zinc-400 font-semibold">
                                                            "{p.textNote}"
                                                        </p>
                                                        <pre className="mt-2 whitespace-pre-wrap font-mono text-xs text-zinc-700 dark:text-zinc-300 leading-relaxed bg-zinc-100 dark:bg-zinc-800 p-2 rounded-md">
                                                            {p.imagePrompt}
                                                        </pre>
                                                    </div>
                                                ))}
                                            </div>
                                        </div>
                                    );
                                })}
                            </div>
                        </div>
                    </div>
                )}
            </div>
        </ToolLayout>
    );
};

export default EdutainmentScriptPromptGenerator;